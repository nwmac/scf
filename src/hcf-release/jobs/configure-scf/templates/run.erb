#!/bin/bash
# This script uses the cf CLI to configure things like http proxies and security
# groups for scf

set -o errexit -o nounset

# put the cli on the path
export PATH=/var/vcap/packages/cli/bin:/var/vcap/packages/service-registration-utils:${PATH}

# Default: verbose operation. Uncomment 2nd line to quiet this job
SILENT=
#SILENT=--silent

BROKER_URL='<%= p("cf_mysql.broker.protocol") %>://<%= p("cf_mysql.external_host") %>:<%= p("cf_mysql.broker.port") %>'
BROKER_USERNAME='<%= p("cf_mysql.broker.auth_username") %>'
BROKER_PASSWORD='<%= p("cf_mysql.broker.auth_password") %>'

<%
require 'shellwords'
env = {}
if_p("hcf_set_proxy.staging_http_proxy") do |val|
   env["staging"] ||= {}
   env["staging"]["http_proxy"] = val
   env["staging"]["http_proxy".upcase] = val
end
if_p("hcf_set_proxy.staging_https_proxy") do |val|
   env["staging"] ||= {}
   env["staging"]["https_proxy"] = val
   env["staging"]["https_proxy".upcase] = val
end
if_p("hcf_set_proxy.staging_no_proxy") do |val|
   env["staging"] ||= {}
   env["staging"]["no_proxy"] = val
   env["staging"]["no_proxy".upcase] = val
end
if_p("hcf_set_proxy.running_http_proxy") do |val|
   env["running"] ||= {}
   env["running"]["http_proxy"] = val
   env["running"]["http_proxy".upcase] = val
end
if_p("hcf_set_proxy.running_https_proxy") do |val|
   env["running"] ||= {}
   env["running"]["https_proxy"] = val
   env["running"]["https_proxy".upcase] = val
end
if_p("hcf_set_proxy.running_no_proxy") do |val|
   env["running"] ||= {}
   env["running"]["no_proxy"] = val
   env["running"]["no_proxy".upcase] = val
end
%>

# Report progress to the user; use as printf
status() {
    local fmt="${1}"
    shift
    printf "\n%b${fmt}%b\n" "\033[0;32m" "$@" "\033[0m"
}

# Report problem to the user; use as printf
trouble() {
    local fmt="${1}"
    shift
    printf "\n%b${fmt}%b\n" "\033[0;31m" "$@" "\033[0m"
}

# helper function to retry a command several times, with a delay between trials
# usage: retry <max-tries> <delay> <command>...
function retry () {
    max=${1}
    delay=${2}
    i=0
    shift 2

    while test ${i} -lt ${max} ; do
        printf "Trying: %s\n" "$*"
        if "$@" ; then
            status ' SUCCESS'
            break
        fi
        trouble '  FAILED'
        status "Waiting ${delay} ..."
        sleep "${delay}"
        i="$(expr ${i} + 1)"
    done
}

CF_SKIP="<%= properties.ssl.skip_cert_verify ? '--skip-ssl-validation' : '' %>"
CURL_SKIP="<%= properties.ssl.skip_cert_verify ? '--insecure' : '' %>"

UAA_ENDPOINT="<%= p('hcf.uaa.internal-url') %>"
API_ENDPOINT="<%= p('cf.insecure_api_url') %>"

status "Waiting for CC ..."
retry 240 30s cf api $CF_SKIP "$API_ENDPOINT"

status "Waiting for UAA ..."
retry 240 30s curl --connect-timeout 5 --fail --header 'Accept: application/json' $UAA_ENDPOINT/info

insert_cf_client_auth_token.rb "$UAA_ENDPOINT" hcf_auto_config:<%= p("uaa.clients.hcf_auto_config.secret").shellescape %> ${CURL_SKIP}

<%
%W{staging running}.each do |runtime|
  if env[runtime] && !env[runtime].empty? %>
cf set-<%= runtime %>-environment-variable-group <%= env[runtime].to_json.shellescape %>
<%end
end %>

status "Waiting for dev mysql broker to be available..."

retry 240 30s curl ${SILENT} --connect-timeout 5 --fail --head --header 'Accept: application/json' -u ${BROKER_USERNAME}:${BROKER_PASSWORD} ${BROKER_URL}/v2/catalog

# Get the IP of the mysql server used for the dev-mysql service
mysql_dev_ip=$(getent hosts <%= p("cf_mysql.host") %> | awk '{ print $1 }' | head -n 1)

# Write a security group definition
echo "[{\"protocol\":\"tcp\",\"destination\":\"${mysql_dev_ip}\",\"ports\": \"<%= p("cf_mysql.mysql.port") %>\"}]" > /tmp/mysql-dev-sg.json

# Create the security group
cf create-security-group dev-mysql /tmp/mysql-dev-sg.json

# Bind the security group
cf bind-staging-security-group dev-mysql
cf bind-running-security-group dev-mysql

status "Remove temporary users"
remove_temporary_users.rb "${API_ENDPOINT}" "${CURL_SKIP}"

status "Setting of external proxies complete."
